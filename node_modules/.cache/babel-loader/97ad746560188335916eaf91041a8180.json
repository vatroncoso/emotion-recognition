{"remainingRequest":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\src\\components\\ParteDos.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\src\\components\\ParteDos.vue","mtime":1639691434264},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\babel.config.js","mtime":1637240904000},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639667165578},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\babel-loader\\lib\\index.js","mtime":1639667166196},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639667165578},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\vue-loader\\lib\\index.js","mtime":1639667167063}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\ValentinaT\\\\Documents\\\\Memoria\\\\WebTheRealAndOnlyDefinitivo\\\\web-app-emociones\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport modelsasd from \"../services/models\";\nimport moment from 'moment';\nexport default {\n  data: function data() {\n    return {\n      dialog: false,\n      emotions: [],\n      image: null,\n      imageUrl: '',\n      faceModel: null,\n      emotionModel: null,\n      arrayCanvasFaces: [],\n      predictedImage: true,\n      notification: false\n    };\n  },\n  methods: {\n    onPickFile: function onPickFile() {\n      this.$refs.fileInput.click();\n    },\n    onFilePicked: function onFilePicked(event) {\n      var _this = this;\n\n      this.predictedImage = true;\n      var files = event.target.files;\n      var filename = files[0].name;\n      if (filename.lastIndexOf('.') <= 0) return alert('Ingresar un archivo valido!');\n      var fileReader = new FileReader();\n      fileReader.addEventListener('load', function () {\n        _this.imageUrl = fileReader.result;\n      });\n      fileReader.addEventListener('loadend', function () {\n        _this.getPredictions();\n      });\n      fileReader.readAsDataURL(files[0]);\n      this.image = files[0];\n    },\n    createCanvas: function createCanvas(id) {\n      var canvas = document.createElement('canvas');\n      canvas.id = \"canvas_face_\".concat(id);\n      canvas.width = 48;\n      canvas.height = 48;\n      var body = document.getElementsByTagName(\"body\")[0];\n      body.appendChild(canvas);\n      return canvas.id;\n    },\n    saveRecord: function saveRecord(record) {\n      this.emotions.unshift(record);\n      var save = JSON.stringify(this.emotions);\n      localStorage.setItem('record', save);\n    },\n    getPredictions: function () {\n      var _getPredictions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var image, width, height, c, ctx, arrayCanvasFaces, predictions, _i, start, end, size, squareSize, canvas, faceCanvasID, body, faceCanvas, ctx_, faceDetected, j, _faceCanvas, ctxf, imgData, arr, arr28, p, i, grayscale, valor, prediction2;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                image = document.getElementById(\"holiwi\");\n                width = image.clientWidth;\n                height = image.clientHeight;\n                c = document.getElementById(\"myCanvas\");\n                ctx = c.getContext(\"2d\");\n                ctx.canvas.width = width;\n                ctx.canvas.height = height;\n                ctx.drawImage(image, 0, 0, width, height);\n                arrayCanvasFaces = [];\n                _context.next = 11;\n                return modelsasd.facePrediction(image);\n\n              case 11:\n                predictions = _context.sent;\n\n                if (predictions.length > 0) {\n                  for (_i = 0; _i < predictions.length; _i++) {\n                    //calcula las dimenciones de la cara detectada\n                    start = predictions[_i].topLeft;\n                    end = predictions[_i].bottomRight;\n                    size = [end[0] - start[0], end[1] - start[1]];\n                    squareSize = size[0] > size[1] ? size[0] : size[1]; // Crea el canvas con cada cara para detectar sus emociones\n\n                    canvas = document.createElement('canvas');\n                    faceCanvasID = \"canvas_face_\".concat(_i);\n                    canvas.id = faceCanvasID;\n                    canvas.width = 48;\n                    canvas.height = 48; // Para ocultar el canvas de las caras\n\n                    canvas.classList.toggle('smallcanvas');\n                    body = document.getElementsByTagName(\"body\")[0];\n                    body.appendChild(canvas); // Dibuja las caras detectadas\n\n                    faceCanvas = document.getElementById(faceCanvasID);\n                    ctx_ = faceCanvas.getContext(\"2d\");\n                    ctx_.drawImage(c, start[0], start[1], squareSize, squareSize, 0, 0, 48, 48);\n                    faceDetected = {\n                      canvas: faceCanvasID,\n                      start: start,\n                      end: end,\n                      size: size,\n                      squareSize: squareSize\n                    };\n                    arrayCanvasFaces.push(faceDetected);\n                  }\n                }\n\n                this.predictedImage = false;\n\n                for (j = 0; j < arrayCanvasFaces.length; j++) {\n                  _faceCanvas = document.getElementById(arrayCanvasFaces[j].canvas);\n                  ctxf = _faceCanvas.getContext(\"2d\");\n                  imgData = ctxf.getImageData(0, 0, 48, 48);\n                  arr = []; //El arreglo completo\n\n                  arr28 = []; //Al llegar a 28 posiciones se pone en 'arr' como un nuevo indice\n\n                  for (p = 0, i = 0; p < imgData.data.length; p += 4) {\n                    grayscale = (imgData.data[p] + imgData.data[p + 1] + imgData.data[p + 2]) / 3;\n                    imgData.data[p] = grayscale;\n                    imgData.data[p + 1] = grayscale;\n                    imgData.data[p + 2] = grayscale;\n                    valor = grayscale / 255;\n                    arr28.push([valor]); //Agregar al arr28 y normalizar a 0-1. Aparte queda dentro de un arreglo en el indice 0... again\n\n                    if (arr28.length == 48) {\n                      arr.push(arr28);\n                      arr28 = [];\n                    }\n                  }\n\n                  arr = [arr]; //Meter el arreglo en otro arreglo por que si no tio tensorflow se enoja >:(\n\n                  prediction2 = modelsasd.emotionPrediction(arr);\n                  this.saveRecord(prediction2);\n\n                  if (prediction2.hasAlarm) {\n                    this.notification = true;\n                  }\n\n                  ctx.strokeStyle = \"#FF0000\";\n                  ctx.strokeRect(arrayCanvasFaces[j].start[0], arrayCanvasFaces[j].start[1], arrayCanvasFaces[j].squareSize, arrayCanvasFaces[j].squareSize);\n                  ctx.fillStyle = \"red\";\n                  ctx.font = '15px serif';\n                  ctx.fillText(prediction2.verbose, arrayCanvasFaces[j].start[0], arrayCanvasFaces[j].start[1] - 5);\n                }\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getPredictions() {\n        return _getPredictions.apply(this, arguments);\n      }\n\n      return getPredictions;\n    }()\n  },\n  computed: {\n    viewEmotionList: function viewEmotionList() {\n      return this.emotions.sort(function (a, b) {\n        return moment(b.ts).format() - moment(a.ts).format();\n      });\n    }\n  },\n  filters: {\n    date: function date(val) {\n      return moment(val).format('LLL');\n    }\n  },\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var storage;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.dialog = true;\n              moment.locale('es-cl');\n              _context2.next = 4;\n              return modelsasd.load();\n\n            case 4:\n              storage = localStorage.getItem('record');\n\n              if (storage != null) {\n                this.emotions = JSON.parse(storage);\n              }\n\n              this.dialog = false;\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }()\n};",{"version":3,"sources":["ParteDos.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  \t<v-container>\n\t\t  \n\t\t<v-row  align=\"center\" justify=\"space-around\">\n      <v-col cols=\"=9\">\n        <!-- <img :src=\"imageUrl\"  width=\"600\" id=\"holiwi\" v-show=\"predictedImage\">\n        <canvas id=\"myCanvas\"></canvas> -->\n\n        <div class=\"outsideWrapper\">\n            <div class=\"insideWrapper\">\n                <img :src=\"imageUrl\" id=\"holiwi\" class=\"coveredImage\">\n                <canvas id=\"myCanvas\" class=\"coveringCanvas\"></canvas>\n            </div>\n        </div>\n\n        <div class=\"text-center\">\n          <v-btn \n            \n            rounded\n            raised\n            dark\n            color=\"#4CAF50\"\n            @click=\"onPickFile\"\n             \n          >\n            Subir Imagen\n             <v-icon\n          dark\n          right\n        >\n          mdi-camera\n        </v-icon>\n          </v-btn>\n        </div>\n\n\t\t  </v-col>\n\n      <v-col cols=\"=3\">\n        <v-card\n          max-width=\"450\"\n          max-height=\"600\"\n          class=\"mx-auto\"\n          \n        >\n          <v-toolbar\n            color=\"#4CAF50\"\n            dark\n          >\n            <v-app-bar-nav-icon></v-app-bar-nav-icon>\n\n            <v-toolbar-title>Historial de Emociones</v-toolbar-title>\n\n            <v-spacer></v-spacer>\n          </v-toolbar>\n          \n          <v-list three-line style=\"overflow-y: scroll;\" max-height=\"536\">\n            <template v-for=\"(item, index) in viewEmotionList\">\n              <v-list-item :key=\"item.id\">\n                  <v-list-item-content>\n                    <v-list-item-title> Emoción detectada: {{item.verbose}}</v-list-item-title>\n\n                    <v-list-item-subtitle> {{item.ts | date}}</v-list-item-subtitle>\n                  </v-list-item-content>\n              </v-list-item>\n\n              <v-divider\n                v-if=\"index < viewEmotionList.length - 1\"\n                :key=\"index\"\n              ></v-divider>\n            </template>\n          </v-list>\n        </v-card>\n\n      </v-col>\n\t\t</v-row>\t\t\n\t\t\n\t\t<v-row>\n      <v-col cols=\"=4\">\n        <input type=\"file\"\n          style=\"display:none\"\n          ref=\"fileInput\"\n          accept=\"image/*\"\n          @change=\"onFilePicked\"\n        >\n      </v-col>\n\t\t</v-row>\n\n    <v-dialog\n      v-model=\"dialog\"\n      hide-overlay\n      persistent\n      width=\"300\"\n    >\n      <v-card\n        color=\"#3E7C17\"\n        dark\n        height = \"35\"\n      >\n        <v-card-text>\n          Cargando modelos, porfavor espere\n          <v-progress-linear\n            indeterminate\n            color=\"white\"\n            class=\"mb-0\"\n          ></v-progress-linear>\n        </v-card-text>\n      </v-card>\n    </v-dialog>\n    \n     <v-snackbar\n       v-model=\"notification\"\n      :timeout=\"3000\"\n      :value=\"true\"\n      color=\"#EA4C4C\"\n      absolute\n      right\n      rounded=\"pill\"\n      bottom\n    >\n      Emoción de connotación negativa detectada\n    </v-snackbar>\n  </v-container>\n</template>\n\n<script>\nimport modelsasd from '../services/models'\nimport moment from 'moment'\n\nexport default {\n    data: () => ({\n      dialog: false,\n      emotions: [],\n      image: null,\n      imageUrl:'',\n      faceModel: null,\n      emotionModel: null,\n      arrayCanvasFaces: [],\n      predictedImage: true,\n      notification: false\n  }),\n\n\tmethods:{\n\n\t\tonPickFile(){\n\t\t\tthis.$refs.fileInput.click()\n\t\t},\n\n\t\tonFilePicked (event) {\n      this.predictedImage = true\n\t\t\tconst files = event.target.files\n\t\t\tlet filename = files[0].name;\n\t\t\t\n      if (filename.lastIndexOf('.')<= 0)\n\t\t\t\treturn alert('Ingresar un archivo valido!')\n\n\t\t\tconst fileReader= new FileReader()\n\t\t\t\n      fileReader.addEventListener('load', ()=>{\n\t\t\t\tthis.imageUrl = fileReader.result\n\t\t\t})\n\n      fileReader.addEventListener('loadend', ()=>{\n        this.getPredictions()\n\t\t\t})\n\n\t\t\tfileReader.readAsDataURL(files[0])\n\t\t\tthis.image = files[0]\n\n\t\t},\n    \n    createCanvas (id) {\n        let canvas = document.createElement('canvas')\n        canvas.id = `canvas_face_${id}`\n        canvas.width = 48\n        canvas.height = 48\n        \n        let body = document.getElementsByTagName(\"body\")[0]\n        body.appendChild(canvas)\n\n        return canvas.id\n    },\n\n    saveRecord (record) {\n      this.emotions.unshift(record)\n      let save = JSON.stringify(this.emotions)\n      localStorage.setItem('record', save);\n    },\n\n    async getPredictions () {\n        const image = document.getElementById(\"holiwi\")\n\n        const width = image.clientWidth\n        const height = image.clientHeight\n\n        let c = document.getElementById(\"myCanvas\")\n        let ctx = c.getContext(\"2d\")\n\n        ctx.canvas.width = width\n        ctx.canvas.height = height\n        ctx.drawImage(image,0,0, width, height)\n\n        let arrayCanvasFaces = []\n        const predictions = await modelsasd.facePrediction(image)\n\n        if (predictions.length > 0) {\n            for (let i = 0; i < predictions.length; i++) {\n                //calcula las dimenciones de la cara detectada\n                const start = predictions[i].topLeft\n                const end = predictions[i].bottomRight\n                const size = [end[0] - start[0], end[1] - start[1]]\n                const squareSize = size[0] > size[1] ? size[0] : size[1]\n                \n                // Crea el canvas con cada cara para detectar sus emociones\n                let canvas = document.createElement('canvas')\n                let faceCanvasID = `canvas_face_${i}`\n                canvas.id = faceCanvasID\n                canvas.width = 48\n                canvas.height = 48\n                // Para ocultar el canvas de las caras\n                canvas.classList.toggle('smallcanvas')\n\n                let body = document.getElementsByTagName(\"body\")[0]\n                body.appendChild(canvas)\n\n                // Dibuja las caras detectadas\n                let faceCanvas = document.getElementById(faceCanvasID)\n                let ctx_ = faceCanvas.getContext(\"2d\")\n                ctx_.drawImage(c, start[0], start[1], squareSize, squareSize, 0, 0, 48, 48)\n\n                const faceDetected = {\n                    canvas: faceCanvasID,\n                    start: start,\n                    end: end,\n                    size: size,\n                    squareSize: squareSize\n                }\n\n                arrayCanvasFaces.push(faceDetected)\n            }\n        }\n\n        this.predictedImage = false\n          for (let j = 0; j < arrayCanvasFaces.length; j++) {\n            let faceCanvas = document.getElementById(arrayCanvasFaces[j].canvas)\n            let ctxf = faceCanvas.getContext(\"2d\")\n\n            var imgData = ctxf.getImageData(0,0,48,48)\n            \n            var arr = [] //El arreglo completo\n            var arr28 = [] //Al llegar a 28 posiciones se pone en 'arr' como un nuevo indice\n            \n            for (var p=0, i=0; p < imgData.data.length; p+=4) {\n                var grayscale = (imgData.data[p] + imgData.data[p+1] + imgData.data[p+2]) / 3;\n    \n                imgData.data[p] = grayscale\n                imgData.data[p+1] = grayscale\n                imgData.data[p+2] = grayscale\n    \n                var valor = grayscale/255\n   \n                arr28.push([valor]); //Agregar al arr28 y normalizar a 0-1. Aparte queda dentro de un arreglo en el indice 0... again\n                if (arr28.length == 48) {\n                    arr.push(arr28)\n                    arr28 = []\n                }\n            }\n            \n            arr = [arr]; //Meter el arreglo en otro arreglo por que si no tio tensorflow se enoja >:(\n\n            const prediction2 = modelsasd.emotionPrediction(arr)\n            this.saveRecord(prediction2)\n\n            if (prediction2.hasAlarm){\n              this.notification = true\n            }\n\n            ctx.strokeStyle = \"#FF0000\"\n            ctx.strokeRect(arrayCanvasFaces[j].start[0], arrayCanvasFaces[j].start[1], arrayCanvasFaces[j].squareSize, arrayCanvasFaces[j].squareSize)\n            ctx.fillStyle = \"red\"\n            ctx.font = '15px serif'\n            ctx.fillText(prediction2.verbose, arrayCanvasFaces[j].start[0], arrayCanvasFaces[j].start[1] - 5)\n        }\n    }\n\t},\n  \n  computed: {\n    viewEmotionList () {\n      return this.emotions.sort((a,b) => moment(b.ts).format() - moment(a.ts).format())\n    },\n  },\n\n  filters: {\n    date (val) {\n      return moment(val).format('LLL')\n    }\n  },\n\n\tasync created(){\n    this.dialog = true\n    moment.locale('es-cl')\n    await modelsasd.load()\n    let storage = localStorage.getItem('record')\n\n    if (storage != null) {\n      this.emotions = JSON.parse(storage)\n    }\n\n    this.dialog = false\n\t}\n\n}\n</script>\n\n\n<style>\n  .outsideWrapper{ \n    height:400px;\n    width: 680px;\n    margin:20px 60px; \n  }\n\n  .insideWrapper{ \n    width:100%; height:100%; \n    position:relative;\n  }\n\n  .coveredImage{ \n    width:100%; height:100%;\n    position:absolute; top:0px; left:0px;\n  }\n\n  .coveringCanvas{ \n    width:100%; height:100%; \n    position:absolute; top:0px; left:0px;\n  }\n\n  .smallcanvas {\n    display: none;\n  }\n</style>"],"sourceRoot":"src/components"}]}