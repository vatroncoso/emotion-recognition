{"remainingRequest":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\src\\components\\ParteDos.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\src\\components\\ParteDos.vue","mtime":1639691434264},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\css-loader\\index.js","mtime":1639667163747},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1639667168709},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\postcss-loader\\src\\index.js","mtime":1639667166138},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639667165578},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\vue-loader\\lib\\index.js","mtime":1639667167063}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.outsideWrapper{ \n  height:400px;\n  width: 680px;\n  margin:20px 60px; \n}\n\n.insideWrapper{ \n  width:100%; height:100%; \n  position:relative;\n}\n\n.coveredImage{ \n  width:100%; height:100%;\n  position:absolute; top:0px; left:0px;\n}\n\n.coveringCanvas{ \n  width:100%; height:100%; \n  position:absolute; top:0px; left:0px;\n}\n\n.smallcanvas {\n  display: none;\n}\n",{"version":3,"sources":["ParteDos.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2TA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"ParteDos.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  \t<v-container>\n\t\t  \n\t\t<v-row  align=\"center\" justify=\"space-around\">\n      <v-col cols=\"=9\">\n        <!-- <img :src=\"imageUrl\"  width=\"600\" id=\"holiwi\" v-show=\"predictedImage\">\n        <canvas id=\"myCanvas\"></canvas> -->\n\n        <div class=\"outsideWrapper\">\n            <div class=\"insideWrapper\">\n                <img :src=\"imageUrl\" id=\"holiwi\" class=\"coveredImage\">\n                <canvas id=\"myCanvas\" class=\"coveringCanvas\"></canvas>\n            </div>\n        </div>\n\n        <div class=\"text-center\">\n          <v-btn \n            \n            rounded\n            raised\n            dark\n            color=\"#4CAF50\"\n            @click=\"onPickFile\"\n             \n          >\n            Subir Imagen\n             <v-icon\n          dark\n          right\n        >\n          mdi-camera\n        </v-icon>\n          </v-btn>\n        </div>\n\n\t\t  </v-col>\n\n      <v-col cols=\"=3\">\n        <v-card\n          max-width=\"450\"\n          max-height=\"600\"\n          class=\"mx-auto\"\n          \n        >\n          <v-toolbar\n            color=\"#4CAF50\"\n            dark\n          >\n            <v-app-bar-nav-icon></v-app-bar-nav-icon>\n\n            <v-toolbar-title>Historial de Emociones</v-toolbar-title>\n\n            <v-spacer></v-spacer>\n          </v-toolbar>\n          \n          <v-list three-line style=\"overflow-y: scroll;\" max-height=\"536\">\n            <template v-for=\"(item, index) in viewEmotionList\">\n              <v-list-item :key=\"item.id\">\n                  <v-list-item-content>\n                    <v-list-item-title> Emoción detectada: {{item.verbose}}</v-list-item-title>\n\n                    <v-list-item-subtitle> {{item.ts | date}}</v-list-item-subtitle>\n                  </v-list-item-content>\n              </v-list-item>\n\n              <v-divider\n                v-if=\"index < viewEmotionList.length - 1\"\n                :key=\"index\"\n              ></v-divider>\n            </template>\n          </v-list>\n        </v-card>\n\n      </v-col>\n\t\t</v-row>\t\t\n\t\t\n\t\t<v-row>\n      <v-col cols=\"=4\">\n        <input type=\"file\"\n          style=\"display:none\"\n          ref=\"fileInput\"\n          accept=\"image/*\"\n          @change=\"onFilePicked\"\n        >\n      </v-col>\n\t\t</v-row>\n\n    <v-dialog\n      v-model=\"dialog\"\n      hide-overlay\n      persistent\n      width=\"300\"\n    >\n      <v-card\n        color=\"#3E7C17\"\n        dark\n        height = \"35\"\n      >\n        <v-card-text>\n          Cargando modelos, porfavor espere\n          <v-progress-linear\n            indeterminate\n            color=\"white\"\n            class=\"mb-0\"\n          ></v-progress-linear>\n        </v-card-text>\n      </v-card>\n    </v-dialog>\n    \n     <v-snackbar\n       v-model=\"notification\"\n      :timeout=\"3000\"\n      :value=\"true\"\n      color=\"#EA4C4C\"\n      absolute\n      right\n      rounded=\"pill\"\n      bottom\n    >\n      Emoción de connotación negativa detectada\n    </v-snackbar>\n  </v-container>\n</template>\n\n<script>\nimport modelsasd from '../services/models'\nimport moment from 'moment'\n\nexport default {\n    data: () => ({\n      dialog: false,\n      emotions: [],\n      image: null,\n      imageUrl:'',\n      faceModel: null,\n      emotionModel: null,\n      arrayCanvasFaces: [],\n      predictedImage: true,\n      notification: false\n  }),\n\n\tmethods:{\n\n\t\tonPickFile(){\n\t\t\tthis.$refs.fileInput.click()\n\t\t},\n\n\t\tonFilePicked (event) {\n      this.predictedImage = true\n\t\t\tconst files = event.target.files\n\t\t\tlet filename = files[0].name;\n\t\t\t\n      if (filename.lastIndexOf('.')<= 0)\n\t\t\t\treturn alert('Ingresar un archivo valido!')\n\n\t\t\tconst fileReader= new FileReader()\n\t\t\t\n      fileReader.addEventListener('load', ()=>{\n\t\t\t\tthis.imageUrl = fileReader.result\n\t\t\t})\n\n      fileReader.addEventListener('loadend', ()=>{\n        this.getPredictions()\n\t\t\t})\n\n\t\t\tfileReader.readAsDataURL(files[0])\n\t\t\tthis.image = files[0]\n\n\t\t},\n    \n    createCanvas (id) {\n        let canvas = document.createElement('canvas')\n        canvas.id = `canvas_face_${id}`\n        canvas.width = 48\n        canvas.height = 48\n        \n        let body = document.getElementsByTagName(\"body\")[0]\n        body.appendChild(canvas)\n\n        return canvas.id\n    },\n\n    saveRecord (record) {\n      this.emotions.unshift(record)\n      let save = JSON.stringify(this.emotions)\n      localStorage.setItem('record', save);\n    },\n\n    async getPredictions () {\n        const image = document.getElementById(\"holiwi\")\n\n        const width = image.clientWidth\n        const height = image.clientHeight\n\n        let c = document.getElementById(\"myCanvas\")\n        let ctx = c.getContext(\"2d\")\n\n        ctx.canvas.width = width\n        ctx.canvas.height = height\n        ctx.drawImage(image,0,0, width, height)\n\n        let arrayCanvasFaces = []\n        const predictions = await modelsasd.facePrediction(image)\n\n        if (predictions.length > 0) {\n            for (let i = 0; i < predictions.length; i++) {\n                //calcula las dimenciones de la cara detectada\n                const start = predictions[i].topLeft\n                const end = predictions[i].bottomRight\n                const size = [end[0] - start[0], end[1] - start[1]]\n                const squareSize = size[0] > size[1] ? size[0] : size[1]\n                \n                // Crea el canvas con cada cara para detectar sus emociones\n                let canvas = document.createElement('canvas')\n                let faceCanvasID = `canvas_face_${i}`\n                canvas.id = faceCanvasID\n                canvas.width = 48\n                canvas.height = 48\n                // Para ocultar el canvas de las caras\n                canvas.classList.toggle('smallcanvas')\n\n                let body = document.getElementsByTagName(\"body\")[0]\n                body.appendChild(canvas)\n\n                // Dibuja las caras detectadas\n                let faceCanvas = document.getElementById(faceCanvasID)\n                let ctx_ = faceCanvas.getContext(\"2d\")\n                ctx_.drawImage(c, start[0], start[1], squareSize, squareSize, 0, 0, 48, 48)\n\n                const faceDetected = {\n                    canvas: faceCanvasID,\n                    start: start,\n                    end: end,\n                    size: size,\n                    squareSize: squareSize\n                }\n\n                arrayCanvasFaces.push(faceDetected)\n            }\n        }\n\n        this.predictedImage = false\n          for (let j = 0; j < arrayCanvasFaces.length; j++) {\n            let faceCanvas = document.getElementById(arrayCanvasFaces[j].canvas)\n            let ctxf = faceCanvas.getContext(\"2d\")\n\n            var imgData = ctxf.getImageData(0,0,48,48)\n            \n            var arr = [] //El arreglo completo\n            var arr28 = [] //Al llegar a 28 posiciones se pone en 'arr' como un nuevo indice\n            \n            for (var p=0, i=0; p < imgData.data.length; p+=4) {\n                var grayscale = (imgData.data[p] + imgData.data[p+1] + imgData.data[p+2]) / 3;\n    \n                imgData.data[p] = grayscale\n                imgData.data[p+1] = grayscale\n                imgData.data[p+2] = grayscale\n    \n                var valor = grayscale/255\n   \n                arr28.push([valor]); //Agregar al arr28 y normalizar a 0-1. Aparte queda dentro de un arreglo en el indice 0... again\n                if (arr28.length == 48) {\n                    arr.push(arr28)\n                    arr28 = []\n                }\n            }\n            \n            arr = [arr]; //Meter el arreglo en otro arreglo por que si no tio tensorflow se enoja >:(\n\n            const prediction2 = modelsasd.emotionPrediction(arr)\n            this.saveRecord(prediction2)\n\n            if (prediction2.hasAlarm){\n              this.notification = true\n            }\n\n            ctx.strokeStyle = \"#FF0000\"\n            ctx.strokeRect(arrayCanvasFaces[j].start[0], arrayCanvasFaces[j].start[1], arrayCanvasFaces[j].squareSize, arrayCanvasFaces[j].squareSize)\n            ctx.fillStyle = \"red\"\n            ctx.font = '15px serif'\n            ctx.fillText(prediction2.verbose, arrayCanvasFaces[j].start[0], arrayCanvasFaces[j].start[1] - 5)\n        }\n    }\n\t},\n  \n  computed: {\n    viewEmotionList () {\n      return this.emotions.sort((a,b) => moment(b.ts).format() - moment(a.ts).format())\n    },\n  },\n\n  filters: {\n    date (val) {\n      return moment(val).format('LLL')\n    }\n  },\n\n\tasync created(){\n    this.dialog = true\n    moment.locale('es-cl')\n    await modelsasd.load()\n    let storage = localStorage.getItem('record')\n\n    if (storage != null) {\n      this.emotions = JSON.parse(storage)\n    }\n\n    this.dialog = false\n\t}\n\n}\n</script>\n\n\n<style>\n  .outsideWrapper{ \n    height:400px;\n    width: 680px;\n    margin:20px 60px; \n  }\n\n  .insideWrapper{ \n    width:100%; height:100%; \n    position:relative;\n  }\n\n  .coveredImage{ \n    width:100%; height:100%;\n    position:absolute; top:0px; left:0px;\n  }\n\n  .coveringCanvas{ \n    width:100%; height:100%; \n    position:absolute; top:0px; left:0px;\n  }\n\n  .smallcanvas {\n    display: none;\n  }\n</style>"]}]}