{"remainingRequest":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\src\\services\\models.js","dependencies":[{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\src\\services\\models.js","mtime":1639670912452},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\babel.config.js","mtime":1637240904000},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639667165578},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\babel-loader\\lib\\index.js","mtime":1639667166196},{"path":"C:\\Users\\ValentinaT\\Documents\\Memoria\\WebTheRealAndOnlyDefinitivo\\web-app-emociones\\node_modules\\eslint-loader\\index.js","mtime":1639667163904}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport \"core-js/modules/es7.array.includes\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\ValentinaT\\\\Documents\\\\Memoria\\\\WebTheRealAndOnlyDefinitivo\\\\web-app-emociones\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n\nrequire('@tensorflow/tfjs-backend-cpu');\n\nrequire('@tensorflow/tfjs-backend-webgl');\n\nvar blazeface = require('@tensorflow-models/blazeface');\n\nvar tf = require('@tensorflow/tfjs');\n\nvar moment = require('moment'); //en que maneja cosa de fechas\n\n\nvar _require = require('uuid'),\n    uuidv4 = _require.v4; //crea id unicas \n\n\nvar faceModel;\nvar emotionModel; // const verbose = [\"üò† Enojo\", \"üò£ Disgusto\", \"üòä Alegr√≠a\", \"üòê Neutro\"]\n// const emotion = [\"angry\", \"disgusted\", \"happy\", \"neutral\"]\n\nvar verbose = [\"üò† Enojo\", \"üò£ Miedo\", \"üòä Alegr√≠a\", \"üòê Neutro\"];\nvar emotion = [\"angry\", \"fear\", \"happy\", \"neutral\"];\nvar alarmEmotion = [\"angry\", \"fear\"];\n\nfunction load() {\n  return _load.apply(this, arguments);\n}\n\nfunction _load() {\n  _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return blazeface.load();\n\n          case 2:\n            faceModel = _context.sent;\n            _context.next = 5;\n            return tf.loadGraphModel('/model/model.json');\n\n          case 5:\n            emotionModel = _context.sent;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _load.apply(this, arguments);\n}\n\nfunction facePrediction(_x) {\n  return _facePrediction.apply(this, arguments);\n}\n\nfunction _facePrediction() {\n  _facePrediction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(image) {\n    var returnTensors, predictions;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            returnTensors = false;\n            _context2.next = 3;\n            return faceModel.estimateFaces(image, returnTensors);\n\n          case 3:\n            predictions = _context2.sent;\n            return _context2.abrupt(\"return\", predictions);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _facePrediction.apply(this, arguments);\n}\n\nfunction emotionPrediction(arr) {\n  var tensor4 = tf.tensor4d(arr);\n  var predictions = emotionModel.predict(tensor4).dataSync();\n  var prediction = predictions.indexOf(Math.max.apply(null, predictions));\n  var hasAlarm = alarmEmotion.includes(emotion[prediction]);\n  return {\n    id: uuidv4(),\n    prediction: prediction,\n    verbose: verbose[prediction],\n    emotion: emotion[prediction],\n    ts: moment().format(),\n    hasAlarm: hasAlarm\n  };\n}\n\nvar models = {\n  load: load,\n  facePrediction: facePrediction,\n  emotionPrediction: emotionPrediction\n};\nexport default models;",{"version":3,"sources":["C:/Users/ValentinaT/Documents/Memoria/WebTheRealAndOnlyDefinitivo/web-app-emociones/src/services/models.js"],"names":["require","blazeface","tf","moment","uuidv4","v4","faceModel","emotionModel","verbose","emotion","alarmEmotion","load","loadGraphModel","facePrediction","image","returnTensors","estimateFaces","predictions","emotionPrediction","arr","tensor4","tensor4d","predict","dataSync","prediction","indexOf","Math","max","apply","hasAlarm","includes","id","ts","format","models"],"mappings":";;;;AAAAA,OAAO,CAAC,8BAAD,CAAP;;AACAA,OAAO,CAAC,gCAAD,CAAP;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,8BAAD,CAAzB;;AACA,IAAME,EAAE,GAAGF,OAAO,CAAC,kBAAD,CAAlB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB,C,CAAiC;;;AACjC,eAAuBA,OAAO,CAAC,MAAD,CAA9B;AAAA,IAAYI,MAAZ,YAAQC,EAAR,C,CAAuC;;;AAEvC,IAAIC,SAAJ;AACA,IAAIC,YAAJ,C,CACA;AACA;;AAEA,IAAMC,OAAO,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,YAAzB,EAAuC,WAAvC,CAAhB;AACA,IAAMC,OAAO,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,SAA3B,CAAhB;AACA,IAAMC,YAAY,GAAG,CAAC,OAAD,EAAS,MAAT,CAArB;;SAEeC,I;;;;;kEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACsBV,SAAS,CAACU,IAAV,EADtB;;AAAA;AACIL,YAAAA,SADJ;AAAA;AAAA,mBAEyBJ,EAAE,CAACU,cAAH,CAAkB,mBAAlB,CAFzB;;AAAA;AAEIL,YAAAA,YAFJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAKeM,c;;;;;4EAAf,kBAA+BC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,aADV,GAC0B,KAD1B;AAAA;AAAA,mBAE8BT,SAAS,CAACU,aAAV,CAAwBF,KAAxB,EAA+BC,aAA/B,CAF9B;;AAAA;AAEUE,YAAAA,WAFV;AAAA,8CAIWA,WAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOA,SAASC,iBAAT,CAA4BC,GAA5B,EAAiC;AAC7B,MAAIC,OAAO,GAAGlB,EAAE,CAACmB,QAAH,CAAYF,GAAZ,CAAd;AACA,MAAMF,WAAW,GAAGV,YAAY,CAACe,OAAb,CAAqBF,OAArB,EAA8BG,QAA9B,EAApB;AACA,MAAMC,UAAU,GAAGP,WAAW,CAACQ,OAAZ,CAAoBC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBX,WAArB,CAApB,CAAnB;AAEA,MAAMY,QAAQ,GAAGnB,YAAY,CAACoB,QAAb,CAAsBrB,OAAO,CAACe,UAAD,CAA7B,CAAjB;AAEA,SAAO;AACHO,IAAAA,EAAE,EAAE3B,MAAM,EADP;AAEHoB,IAAAA,UAAU,EAAEA,UAFT;AAGHhB,IAAAA,OAAO,EAAEA,OAAO,CAACgB,UAAD,CAHb;AAIHf,IAAAA,OAAO,EAAEA,OAAO,CAACe,UAAD,CAJb;AAKHQ,IAAAA,EAAE,EAAE7B,MAAM,GAAG8B,MAAT,EALD;AAMHJ,IAAAA,QAAQ,EAAEA;AANP,GAAP;AAQH;;AAED,IAAMK,MAAM,GAAG;AACXvB,EAAAA,IAAI,EAAJA,IADW;AAEXE,EAAAA,cAAc,EAAdA,cAFW;AAGXK,EAAAA,iBAAiB,EAAjBA;AAHW,CAAf;AAMA,eAAegB,MAAf","sourcesContent":["require('@tensorflow/tfjs-backend-cpu')\r\nrequire('@tensorflow/tfjs-backend-webgl')\r\nconst blazeface = require('@tensorflow-models/blazeface')\r\nconst tf = require('@tensorflow/tfjs')\r\nconst moment = require('moment') //en que maneja cosa de fechas\r\nconst { v4: uuidv4 } = require('uuid') //crea id unicas \r\n\r\nlet faceModel\r\nlet emotionModel\r\n// const verbose = [\"üò† Enojo\", \"üò£ Disgusto\", \"üòä Alegr√≠a\", \"üòê Neutro\"]\r\n// const emotion = [\"angry\", \"disgusted\", \"happy\", \"neutral\"]\r\n\r\nconst verbose = [\"üò† Enojo\", \"üò£ Miedo\", \"üòä Alegr√≠a\", \"üòê Neutro\"]\r\nconst emotion = [\"angry\", \"fear\", \"happy\", \"neutral\"]\r\nconst alarmEmotion = [\"angry\",\"fear\"]\r\n\r\nasync function load () {\r\n    faceModel = await blazeface.load()\r\n    emotionModel = await tf.loadGraphModel('/model/model.json')\r\n}\r\n\r\nasync function facePrediction (image) {\r\n    const returnTensors = false\r\n    const predictions = await faceModel.estimateFaces(image, returnTensors)\r\n\r\n    return predictions\r\n}\r\n\r\nfunction emotionPrediction (arr) {\r\n    let tensor4 = tf.tensor4d(arr)\r\n    const predictions = emotionModel.predict(tensor4).dataSync()\r\n    const prediction = predictions.indexOf(Math.max.apply(null, predictions))\r\n\r\n    const hasAlarm = alarmEmotion.includes(emotion[prediction])\r\n\r\n    return {\r\n        id: uuidv4(),\r\n        prediction: prediction,\r\n        verbose: verbose[prediction],\r\n        emotion: emotion[prediction],\r\n        ts: moment().format(),\r\n        hasAlarm: hasAlarm\r\n    }\r\n}\r\n\r\nconst models = {\r\n    load,\r\n    facePrediction,\r\n    emotionPrediction\r\n}\r\n\r\nexport default models"]}]}